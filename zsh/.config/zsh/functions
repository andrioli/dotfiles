bold=$(tput bold)
normal=$(tput sgr0)
red=$(tput setaf 1)

function git-summary() {
  echo "${bold}Branches:${normal}"
  git --no-pager branch

  output=`script -q /dev/null git remote -v`
  if [[ $output ]]; then
    echo "${bold}Remotes:${normal}"
    echo $output
  fi

  output=`script -q /dev/null git status -s --ignored`
  if [[ $output ]]; then
    echo "${bold}Status:${normal}"
    echo $output
  fi

  output=`script -q /dev/null git --no-pager stash list`
  if [[ $output ]]; then
    echo "${bold}Stash:${normal}"
    echo $output
  fi
}

function git-cleanup() {
  # Stash any changes
  git stash

  # Pull and prune origin
  if git remote | grep -q '^origin$'; then
    # Get origin default branch
    defaultBranch=`git remote show origin | awk '/HEAD branch/ {print $NF}'`

    # Checkout default branch
    git checkout $defaultBranch

    git pull
    git remote prune origin
  fi

  # Pull and prune upstream
  if git remote | grep -q '^upstream$'; then
    git fetch upstream
    git remote prune upstream
  fi

  output=`git --no-pager stash list`
  if [[ ! $output ]]; then
    git reflog expire --all --expire=all --expire-unreachable=all
    git gc --aggressive --prune=now
  else
    echo "${red}Skip cleanup to avoid lost stashed changes${normal}"
  fi
}

function github-clone-all() {
  gh repo list $1 --limit 1000 ${@:2} | while read -r repo _; do
    gh repo clone "$repo" "$repo" -- -q 2>/dev/null || (
      cd "$repo"
      pwd
      git-cleanup
      echo
    )
  done
}

function docker-summary() {
  echo "${bold}Containers:${normal}"
  docker ps -a

  echo "${bold}Images:${normal}"
  docker images

  echo "${bold}Volumes:${normal}"
  docker volume ls

  echo "${bold}Networks:${normal}"
  docker network ls
}

function docker-update() {
  for i in `docker-images`; do
    docker pull $i
  done
}

function docker-cleanup-images() {
  for i in `docker images -f "dangling=true" -q`; do
    docker rmi $i
  done
}

function remove-from-path() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}

function setjdk() {
  if [ $# -ne 0 ]; then
    remove-from-path '/System/Library/Frameworks/JavaVM.framework/Home/bin'
    if [ -n "${JAVA_HOME+x}" ]; then
      remove-from-path $JAVA_HOME/bin
    fi
    export JAVA_HOME=`/usr/libexec/java_home -v $@`
    export PATH=$JAVA_HOME/bin:$PATH
  fi
}

brew() {
  if [[ $1 == "cat" ]]; then
    command brew "$@" | bat --language=ruby -pp
  elif [[ $1 == notin  ]]; then
    diff <(cat $2 | jq '.entries.brew | keys[]' | tr -d '"' | sort) <(brew leaves | sort) | grep ">" | cut -d " " -f2
    diff <(cat $2 | jq '.entries.cask | keys[]' | tr -d '"' | sort) <(brew list --cask | sort) | grep ">" | cut -d " " -f2
  else
    command brew "$@"
  fi
}

# See: https://ane.iki.fi/2022/06/21/beenthere-donethat.html
bt() {
  if [[ -z "$1" ]]; then
    CMD=$(history -10 | fzf --header="Choose a command to save" --no-sort --tac | cut -d' ' -f 6-)
  else
    CMD=$1
  fi

  [[ -z "$CMD" ]] && echo "Aborted" && return 2
  echo "Saving \"${CMD}\"..."
  echo -n "Name of command: "
  read NAME
  [[ -z "$NAME" ]] && echo "No name given, aborting" && return 1
  echo -n "Longer description (optional): "
  LONG=$(read)

  if [[ ! -d "${HOME}/.config/btdt" ]]; then
    mkdir -p "${HOME}/.config/btdt"
  fi

  DATA="${BTDT_DATA:-${HOME}/.config/btdt/data}"

  if [[ ! -f $DATA ]]; then
    touch $DATA
  fi

  result="${CMD}\t${NAME}\t${LONG}\n"
  printf "$result" >> $DATA
}

dt() {
    local data="${BTDT_DATA:-${HOME}/.config/btdt/data}"
    local cmd=$(cat $data | fzf -d'\t' --with-nth 2 --preview='echo -e "\033[1m"{1}"\033[0m""\n\n"{3}' | cut -f1)
    print -z "${cmd}"
}
